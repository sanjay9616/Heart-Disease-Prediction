# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Kxk4KNZ0VeCPWwu9J7Rgu4FmTstLkyi
"""



"""import the dependencies"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and processing"""

# LOading the csv data to a pandas DataFrame
heart_data=pd.read_csv('/content/data.csv')

# Print first 5 rows of the data set
heart_data.head()

# print last 5 rows of the data set
heart_data.tail()

# Number of rows and column in the data set
heart_data.shape

# getting some info of the date det
heart_data.info()

# checking for missimg values
heart_data.isnull().sum()

# ststical measure about the data
heart_data.describe()

# checking the distribution of target variable
heart_data['target'].value_counts()

"""
1 --> Defective Heart
0 --> Healthy Heart"""



"""Spliting the Features and Target"""

X=heart_data.drop(columns='target',axis=1)
Y=heart_data['target']

print(X)

print(Y)

"""Spliting the data into Training Data & Test Data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

Logistic Regression
"""

model=LogisticRegression()

# training the logistic regression model with training data
model.fit(X_train,Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on traing data
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print('Accuracy on Traing Data: ',training_data_accuracy)

# accuracy on test data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print('Accuracy on Test Data: ',test_data_accuracy)

"""Building a Predictive System"""

input_data=(51,1,0,140,299,0,1,173,1,1.6,2,0,3)

# change the input data to numpy array
input_data_as_numpy_array=np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

prediction=model.predict(input_data_reshaped)
print(prediction)
if(prediction[0]==0):
  print('The Person does not have Heart Disease')
else:
  print('The Person has Heart Disease')

